---
title: "Bucks County UFO Text Analysis"
format: html
message: FALSE
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r}
#| echo: false
library(tidyverse)
library(lubridate)
library(tidytext)

nuforc_reports <-
  read_csv(file = "nuforc_reports_past_10_years_bucks.csv", 
           col_types = cols(.default = "c"))

case_count <- 
  nuforc_reports %>% 
  count() %>% 
  as.numeric()

```

## Summary

## Word Frequency tf-idf

```{r}
#| echo: false

case_descriptions <- 
  nuforc_reports %>% 
  select(case = key, description)
  
case_words <- case_descriptions %>%
  unnest_tokens(word, description) %>%
  count(case, word, sort = TRUE)

total_words <- case_words %>% 
  group_by(case) %>% 
  summarize(total = sum(n))

case_words <- 
  case_words %>% 
  left_join(total_words)

case_words

```

```{r}
#| echo: false

freq_by_rank <- case_words %>% 
  group_by(case) %>% 
  mutate(rank = row_number(), 
         `term frequency` = n/total) %>%
  ungroup()

freq_by_rank

freq_by_rank %>% 
  filter(case %in% c("88434", "87243", "90975", "83186", "112853")) %>% 
  ggplot(aes(rank, `term frequency`, color = case)) + 
  geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()

case_tf_idf <- case_words %>%
  bind_tf_idf(word, case, n)

library(forcats)

case_tf_idf %>%
  filter(case %in% c("88434", "87243", "90975", "83186")) %>% 
  group_by(case) %>%
  slice_max(tf_idf, n = 15) %>%
  ungroup() %>%
  ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = case)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~case, ncol = 2, scales = "free") +
  labs(x = "tf-idf", y = NULL)

```

## Word Cloud

```{r}
#| echo: false

tidy_cases <- case_descriptions %>%
  ungroup() %>%
  unnest_tokens(word, description)

library(reshape2)
library(wordcloud)

tidy_cases %>%
  filter(word != "object") %>% 
  inner_join(get_sentiments("bing")) %>%
  count(word, sentiment, sort = TRUE) %>%
  acast(word ~ sentiment, value.var = "n", fill = 0) %>%
  comparison.cloud(colors = c("darkred", "darkgreen"),
                   max.words = 150)

```

## Ngrams

### Bigrams

```{r}
#| echo: false

bigrams <- case_descriptions %>%
  unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
  filter(!is.na(bigram))

bigrams %>%
  count(bigram, sort = TRUE)

library(tidyr)

bigrams_separated <- bigrams %>%
  separate(bigram, c("word1", "word2"), sep = " ")

bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word)

# new bigram counts:
bigram_counts <- bigrams_filtered %>% 
  count(word1, word2, sort = TRUE)

bigrams_united <- bigrams_filtered %>%
  unite(bigram, word1, word2, sep = " ")

bigram_tf_idf <- bigrams_united %>%
  count(case, bigram) %>%
  bind_tf_idf(bigram, case, n) %>%
  arrange(desc(tf_idf))

bigram_tf_idf

```
### Network Graphs

```{r}
#| echo: false

library(igraph)

bigram_counts

bigram_graph <- bigram_counts %>%
  # filter(n > 20) %>%
  # filter(n > 3) %>% # best for bucks dataset
  filter(n > 2) %>%
  graph_from_data_frame()


library(ggraph)
set.seed(2017)

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link() +
  geom_node_point() +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1)

set.seed(2020)

a <- grid::arrow(type = "closed", length = unit(.15, "inches"))

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
                 arrow = a, end_cap = circle(.07, 'inches')) +
  geom_node_point(color = "lightblue", size = 5) +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
  theme_void()

```

### Word Correlations

```{r}

library(widyr)

word_cors <- case_words %>%
  select(case, word) %>% 
  group_by(word) %>%
  filter(n() >= 20) %>%
  pairwise_cor(word, case, sort = TRUE)

```

### Trigrams

```{r}
#| echo: false

trigrams <- case_descriptions %>%
  unnest_tokens(trigram, description, token = "ngrams", n = 3) %>%
  filter(!is.na(trigram))

trigrams %>%
  count(trigram, sort = TRUE)

library(tidyr)

trigrams_separated <- trigrams %>%
  separate(trigram, c("word1", "word2", "word3"), sep = " ")

trigrams_filtered <- trigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word) %>% 
  filter(!word3 %in% stop_words$word)

# new trigram counts:
trigram_counts <- trigrams_filtered %>% 
  count(word1, word2, word3, sort = TRUE)

trigrams_united <- trigrams_filtered %>%
  unite(trigram, word1, word2, word3, sep = " ")

trigram_tf_idf <- trigrams_united %>%
  count(case, trigram) %>%
  bind_tf_idf(trigram, case, n) %>%
  arrange(desc(tf_idf))

trigram_tf_idf

```
